// Generated by CoffeeScript 1.12.2
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.TopUsersView = (function(superClass) {
    extend(TopUsersView, superClass);

    function TopUsersView() {
      return TopUsersView.__super__.constructor.apply(this, arguments);
    }

    TopUsersView.prototype.template = '<div class="row"> <div class="col-lg-6"> <h2>Most Similar to <a class="tip3" data-toggle="tooltip" data-placement="right" title="These are the users you are most similar to. Many movies they&#39;ve seen and liked will be recommended to you."> <i class="icon-info-sign smallicon"></i> </a> </h2> <div id="similarity"> </div> </div> <div class="col-lg-6"> <h2>Least Similar to <a class="tip4" data-toggle="tooltip" data-placement="right" title="These are the users who have opposite preferences as you. Movies they don&#39;t like you often like."> <i class="icon-info-sign smallicon"></i> </a> </h2> <div id="disSimilarity"> </div> </div> </div>';

    TopUsersView.prototype.initialize = function() {
      this.oldUsers;
      this.$el.append(this.template);
      this.$('.tip3').tooltip('hide');
      this.$('.tip4').tooltip('hide');
      this.$('#similarity').isotope({
        itemSelector: '.element',
        animationEngine: 'jquery'
      });
      this.$('#disSimilarity').isotope({
        itemSelector: '.element',
        animationEngine: 'jquery'
      });
      return setTimeout(function() {
        this.$('#similarity').isotope('reLayout');
        return this.$('#disSimilarity').isotope('reLayout');
      }, 100);
    };

    TopUsersView.prototype.reRender = function(res) {
      var disNewUser, disRemoveUser, disUsersToAdd, disUsersToRemove, index, newUser, removeUser, userid, usersToAdd, usersToRemove;
      this.$('#similarity').isotope('shuffle');
      this.$('#disSimilarity').isotope('shuffle');
      usersToAdd = _.difference(res.similarUsers.slice(0, 5), this.oldUsers);
      usersToRemove = _.difference(this.oldUsers, res.similarUsers.slice(0, 5));
      this.oldUsers = res.similarUsers.slice(0, 5);
      for (index in usersToAdd) {
        userid = usersToAdd[index];
        this.name = this.model.userObj.userLookup[userid] || 'newUser';
        newUser = $('<div id="' + userid + '" class="element user metalloid ' + this.name.replace(/\s+/g, '').toLowerCase() + '">' + this.name + '</div>');
        this.$('#similarity').isotope('insert', newUser);
      }
      for (index in usersToRemove) {
        userid = usersToRemove[index];
        this.nameRemove = this.model.userObj.userLookup[userid] || 'newUser';
        removeUser = this.$('.' + this.nameRemove.replace(/\s+/g, '').toLowerCase());
        this.$('#similarity').isotope('remove', removeUser);
      }
      this.$('#similarity').isotope('shuffle');
      if (res.similarUsers.length > 5) {
        disUsersToAdd = _.difference(res.similarUsers.slice(-5), this.oldDisUsers);
        disUsersToRemove = _.difference(this.oldDisUsers, res.similarUsers.slice(-5));
        this.oldDisUsers = res.similarUsers.slice(-5);
        for (index in disUsersToAdd) {
          userid = disUsersToAdd[index];
          this.disName = this.model.userObj.userLookup[userid] || 'newUser';
          disNewUser = $('<div id="' + userid + '" class="element user halogen ' + this.disName.replace(/\s+/g, '').toLowerCase() + '">' + this.disName + '</div>');
          this.$('#disSimilarity').isotope('insert', disNewUser);
        }
        for (index in disUsersToRemove) {
          userid = disUsersToRemove[index];
          this.disNameRemove = this.model.userObj.userLookup[userid] || 'newUser';
          disRemoveUser = this.$('.' + this.disNameRemove.replace(/\s+/g, '').toLowerCase());
          this.$('#disSimilarity').isotope('remove', disRemoveUser);
        }
        return this.$('#disSimilarity').isotope('shuffle');
      }
    };

    return TopUsersView;

  })(Backbone.View);

}).call(this);
